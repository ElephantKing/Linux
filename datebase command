数据库：
+++++------------查看命令-----------+++++
查看数据库版本:show version();
查看日期：show now();
查看用户：show user();
查看数据库：show databases;
查看当前所使用的数据库：select database();
查看数据表：show tables; or show tables from mysql;
查看数据表的结构：show columns from tb_name;
查看数据表的信息：show create table tb_name;

+++++------------数据库操作-----------+++++
创建数据库: create database if not exists t;
删除数据库：drop database if exists t;
修改数据库编码：alter database t character set utf8;
修改客户端编码方式：SET NAMES GBK;

+++++------------数据表操作-----------+++++
创建数据表：
create table if not exists tb_name(
	username varchar(20) not null,
	age tinyint unsigned,
	email varchar(30) not null,
	salary float(8,2) unsigned
);
上表中username不为空，那么在插入数据的时候不能指定username为null
但是，但是，但是：
insert into tb_name (age,salary) values(10,102);
这个插入语句是OK的，并且此时username的值为"",即为空字符串与NULL不同。


插入数据表：
insert [into] tb_name [(columns1, columns2 ...)] values(val1,val2,..);
or insert tb_name values(val1,val2,..)

查看数据表的记录：
select * from tb_name;

自动增长编号必须为主键,如果没有将id设置为主键，则下面的命令出错，且自动编号的字段必须为数值型
create table tb_name(
	id int unsigned auto_increment primary key,
	username varchar(20) not null default 'abc'，
	sex enum('man','female','secret') default 'secret'
);
自增长编号是从当前表存在的最大编号+1，如存在编号1,2,3,100,插入记录后，编号为101

主键在一个表中只允许只有一个，且其值不能为null
unique key也可以保证唯一性，但是该值可以为null,一个表能允许有多个唯一约束

增加列：
alter table tb_name add age tinyint unsigned not null [first | after columns]
删除列：
alter table tb_name drop column1, drop column2;
添加约束：
alter table tb_name add Unique (columns);
alter table tb_name add primary key (columns); 
删除约束：
alter table tb_name drop primary key;
alter table tb_name drop Unique (columns);
先查看唯一约束：show index from tb_name;
alter table tb_name drop index index_name;
partition-list
修改列定义：
移动列的位置到最前面或者某列后面(after columns_name):
以及同时可以修改列的属性：
alter table tb_name modify column_name int unsigned FIRST;
alter tabel tb_name change column_name new_column_name int not null;

修改表名字：不要轻易修改表名
alter table tb1 rename tb2;
rename table old_tb_name to new_tb_name;

insert命令：可以用null，或者default代替有默认值或者自增长的字段
insert tb_name (column_name1,...) values(val1,...)
insert tb_name set column_name1=val1,column_name2=val2;
将查询的结果写入数据表：
insert into tb_name1(column1,column2) select column3,column4 from tb_name2 [where expr]
update命令：可以更新多个字段，更新多行，用逗号隔开
update tb_name set column_name=val [where expr]

delete命令：
delete from tb_name where id = 6;
delete from tb_name;//删除所有数据

select命令：
select tb_name.id from tb_name;
select id AS pid,name ad username from tb_name;//as可以省略

group by:
将查询的结果分组：即列出查询条件的满足的第一条记录
如：
select * from tb_name group by sex;
这条命令只会列出sex字段不同的记录，而且是每种不同记录的第一条

having命令：
没看懂！！

order by命令：
select * from tb_name order by column_name1, column_name2;
根据column_name1排序，若能直接排序则忽略后面的字段，否则再按column_name2排序

limit命令：
select * from tb_name limit 2;//返回前两条
select * from tb_name limit 0,2//返回前两条

子查询：
使用比较运算符引发的子查询：
select AVG(price) from tb_name;//查询字段price的平均值，返回一个浮点数
select id,goods_name from tb_name where price >= 1000;
将上面两个语句放在一起：
select id,goods_name from tb_name where price >= (select AVG(price) from tb_name);
当括号内的子查询的返回值有多行，那么需要使用 ANY ALL SOME修饰，如下：
select id,goods_name from tb_name where price >= ANY (select price where goods_type = 'sony')
很显然品牌为sony的电脑有不同价格，那么子查询select price where goods_type = 'sony'返回的不止一行
外部查询加上any之后，表明条件在子查询中多行数据中只要有任意一行数据满足就行，any=some，ALL表示所有行都必须要满足

有in和not in引发的子查询：
in与 = ANY等价
not int 与 != ANY

多表更新：
update tb_name1 inner join tb_name2 on tb_name1.col1 = tb_name2.col2 set tb_name1.col3 = tb_name4.col4;

内连接：
仅显示符合条件的记录，即左右两个表都满足连接条件的记录
外连接：
左外连接：
显示左表中全部 + 右表中符合条件的
右外连接
显示左表中符合条件的 + 右表中所有记录

+++++------------常用函数-----------+++++
字符函数：
连接若干个字符串：CONCAT():CONCAT("ABC","DFD","DF");
用指定字符连接字符串：CONCAT_WS():CONCAT_WS("-","ASDF","DF");
转小写：LOWER()
转大写：UPPER()
前缀：LEFT():LEFT("ABCD",2) = "AB"
后缀：RIGHT():RIGHT("ABCD",2) = "CD"
字符串长度：LENGTH():
删除前导空格：LTRIM()：LTRIM("   abc");
删除后导空格：RTRIM()
删除所有空格：TRIM():TRIM("   ABC ");
从前或后删除指定字符：
TRIM(TRAILING 'A' FROM 'BCBCA')=ABCBC
TRIM(LEADING 'A' FROM 'BCBCA')=BCBCA
TRIM(BOTH 'A' FROM 'BCBCA')=BCBC

子串：SUBSTRING(source, start, end = MAX_LEN);和C++中一样不过没有从0开始，start也可以是负数，进行加长度处理
LIKE：通配符为%表示任意多个字符，_表示任意一个字符，如果要搜索包含%的内容可以这样
SELECT * FROM TB1 WHERE name LIKE '%1%%' ESCAPE '1'
REPLACE():REPLACE('???MY??SQL??','?','')=MYSQL

数值函数：
CEIL():CEIL(2.1) = 3
FLOOR():FLOOR(3.9)=3,FLOOR(3.0)=3
DIV:3 DIV 4 = 0
MOD:5.1 MOD 3 = 2.1
ROUND(2.132，0)=2，ROUND(2.532，0)=3
POWER(A,B)

比较运算：
select 11 [not] between 1 and 13;返回true or false
select 1 [not] in(1,23,4);返回true or false
select * from tb where name is [not] NULL;//不能写成where name=NULL

日期函数：
NOW():日期+时间
CURDATE()：日期
CURTIME()：时间
DATE_ADD():
DATEDIFF():DATEDIFF('2012-1-2','2302-2-1')
DATE_FORMAT():
DATE_FORMAT('2012-1-2', '%m-%d-%y')=01-02-12
DATE_FORMAT('2012-1-2', '%M-%D-%Y')=January-2nd-2012

信息函数：
CONNECTION_ID():返回mysql连接的ID
DATABASE()
USER()
VERSION()

聚合函数：只有一个返回值
AVG()
COUNT()
MAX()
MIN()
SUM()

加密函数：
MD5():MD5('ACB')
PASSWORD()：PASSWORD('ABC'),修改当前用户密码：SET PASSWORD=PASSWORD('NEW PASSWORD')
